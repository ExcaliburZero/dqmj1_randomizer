#!/usr/bin/env python3
# ruff: noqa: N802
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Sat Oct 12 20:04:52 2024
#
import logging
import pathlib
import random
from typing import Any, Optional

import wx  # type: ignore
from pubsub import pub  # type: ignore

from dqmj1_randomizer.randomize.regions import Region
from dqmj1_randomizer.randomize_thread import RandomizeThread
from dqmj1_randomizer.setup_logging import setup_logging
from dqmj1_randomizer.state import BiasedByStatTotalMonsterShuffle, State

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class Main(wx.Frame):
    def __init__(self, *args: Any, **kwds: Any) -> None:
        # begin wxGlade: Main.__init__
        setup_logging(pathlib.Path("log.txt"))
        self.progress_dialog = None
        self.last_step_completed: Optional[int] = None
        self.state = State()
        pub.subscribe(self._on_randomize_start, "randomize.start")
        pub.subscribe(self._on_randomize_num_steps, "randomize.num_steps")
        pub.subscribe(self._on_randomize_progress, "randomize.progress")
        pub.subscribe(self._on_randomize_successful, "randomize.successful")
        pub.subscribe(self._on_randomize_failed, "randomize.failed")

        self.state.monsters.randomization_policy = BiasedByStatTotalMonsterShuffle(50)

        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((532, 388))
        self.SetTitle("DQMJ1 Unofficial Randomizer")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.FlexGridSizer(1, 6, 10, 10)
        sizer_1.Add(grid_sizer_1, 0, wx.ALL, 10)

        original_rom = wx.StaticText(self.panel_1, wx.ID_ANY, "Original ROM (*.nds)")
        original_rom.SetFont(
            wx.Font(
                9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""
            )
        )
        original_rom.SetToolTip('".nds" file of the ROM to randomize')
        grid_sizer_1.Add(original_rom, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 0)

        self.input_original_rom = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        grid_sizer_1.Add(self.input_original_rom, 0, 0, 0)

        self.OriginalRomBrowse = wx.Button(self.panel_1, wx.ID_ANY, "Browse")
        grid_sizer_1.Add(self.OriginalRomBrowse, 0, 0, 0)

        grid_sizer_1.Add((0, 0), 0, 0, 0)

        label_seed = wx.StaticText(self.panel_1, wx.ID_ANY, "Seed")
        label_seed.SetFont(
            wx.Font(
                9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""
            )
        )
        label_seed.SetToolTip("Number to use to control the randomness")
        grid_sizer_1.Add(label_seed, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 0)

        self.input_seed = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.input_seed.SetValue(str(random.randint(0, (2**32) - 1)))
        self.state.seed = int(self.input_seed.GetValue())
        grid_sizer_1.Add(self.input_seed, 0, 0, 0)

        grid_sizer_6 = wx.FlexGridSizer(1, 3, 0, 0)
        sizer_1.Add(grid_sizer_6, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        region = wx.StaticText(self.panel_1, wx.ID_ANY, "Region")
        region.SetFont(
            wx.Font(
                9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""
            )
        )
        region.SetToolTip(
            "Region the original ROM was released in. Some of the game's internal file formats differ slightly between regions."
        )
        grid_sizer_6.Add(region, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_6.Add((10, 0), 0, 0, 0)

        self.radio_box_region = wx.RadioBox(
            self.panel_1,
            wx.ID_ANY,
            "",
            choices=["North America", "Europe", "Japan"],
            majorDimension=1,
            style=wx.RA_SPECIFY_ROWS,
        )
        self.radio_box_region.SetSelection(0)
        self.state.region = Region(self.radio_box_region.GetSelection())
        grid_sizer_6.Add(self.radio_box_region, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.notebook_1 = wx.Notebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.notebook_1, 1, wx.ALL | wx.EXPAND, 10)

        self.monsters_tab = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.monsters_tab, "Monsters")

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_2 = wx.FlexGridSizer(2, 1, 4, 0)
        sizer_2.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 10)

        self.checkbox_randomize_monsters = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Randomize monsters"
        )
        self.checkbox_randomize_monsters.SetToolTip(
            "If checked, randomizes the monster encounters table."
        )
        self.checkbox_randomize_monsters.SetValue(1)
        self.state.monsters.randomize = self.checkbox_randomize_monsters.GetValue() == 1
        grid_sizer_2.Add(self.checkbox_randomize_monsters, 0, 0, 0)

        grid_sizer_5 = wx.FlexGridSizer(7, 2, 4, 0)
        grid_sizer_2.Add(grid_sizer_5, 1, wx.ALL | wx.EXPAND, 0)

        grid_sizer_5.Add((20, 0), 0, 0, 0)

        self.checkbox_monsters_include_bosses = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Include bosses"
        )
        self.checkbox_monsters_include_bosses.SetToolTip(
            "If checked, randomizes bosses along with other encounters. If not checked, then bosses are kept the same."
        )
        self.state.monsters.include_bosses = (
            self.checkbox_monsters_include_bosses.GetValue() == 1
        )
        grid_sizer_5.Add(self.checkbox_monsters_include_bosses, 0, 0, 0)

        grid_sizer_5.Add((20, 0), 0, 0, 0)

        grid_sizer_3 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_5.Add(grid_sizer_3, 1, wx.EXPAND, 0)

        grid_sizer_3.Add((20, 0), 0, 0, 0)

        self.checkbox_transfer_item_drop_to_replacement_monster = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Transfer item drop to replacement monsters"
        )
        self.checkbox_transfer_item_drop_to_replacement_monster.SetToolTip(
            "If checked, then the monsters that replace each boss will drop the same items as the boss monster. Useful for keeping player spell book drops the same."
        )
        self.checkbox_transfer_item_drop_to_replacement_monster.Enable(False)
        self.checkbox_transfer_item_drop_to_replacement_monster.SetValue(1)
        self.state.monsters.transfer_boss_item_drops = (
            self.checkbox_transfer_item_drop_to_replacement_monster.GetValue() == 1
        )
        grid_sizer_3.Add(
            self.checkbox_transfer_item_drop_to_replacement_monster, 0, 0, 0
        )

        grid_sizer_5.Add((20, 0), 0, 0, 0)

        self.checkbox_monsters_include_starters = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Include starters"
        )
        self.checkbox_monsters_include_starters.SetToolTip(
            "If checked, randomizes starters along with other encounters."
        )
        self.checkbox_monsters_include_starters.SetValue(1)
        self.state.monsters.include_starters = (
            self.checkbox_monsters_include_starters.GetValue() == 1
        )
        grid_sizer_5.Add(self.checkbox_monsters_include_starters, 0, 0, 0)

        grid_sizer_5.Add((20, 0), 0, 0, 0)

        self.checkbox_monsters_include_gift_monsters = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Include gift monsters"
        )
        self.checkbox_monsters_include_gift_monsters.SetToolTip(
            "If checked, randomizes gifted monsters along with other encounters."
        )
        self.checkbox_monsters_include_gift_monsters.SetValue(1)
        self.state.monsters.include_gift_monsters = (
            self.checkbox_monsters_include_gift_monsters.GetValue() == 1
        )
        grid_sizer_5.Add(self.checkbox_monsters_include_gift_monsters, 0, 0, 0)

        grid_sizer_5.Add((20, 0), 0, 0, 0)

        self.checkbox_monsters_swap_scout_chance = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Swap scout chance"
        )
        self.checkbox_monsters_swap_scout_chance.SetToolTip(
            "If checked, swaps the scout chance of encounters. It is good to keep this checked to make arena monsters and boss monsters scoutable if they appear in the wild."
        )
        self.checkbox_monsters_swap_scout_chance.SetValue(1)
        self.state.monsters.swap_scout_chance = (
            self.checkbox_monsters_swap_scout_chance.GetValue() == 1
        )
        grid_sizer_5.Add(self.checkbox_monsters_swap_scout_chance, 0, 0, 0)

        grid_sizer_5.Add((20, 0), 0, 0, 0)

        self.checkbox_monsters_swap_exp_drops = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Swap experience drops"
        )
        self.checkbox_monsters_swap_exp_drops.SetToolTip(
            "If checked, swaps the experience drop of encounters. It is good to keep this checked to ensure all encounters drop experience."
        )
        self.checkbox_monsters_swap_exp_drops.SetValue(1)
        self.state.monsters.swap_experience_drops = (
            self.checkbox_monsters_swap_exp_drops.GetValue() == 1
        )
        grid_sizer_5.Add(self.checkbox_monsters_swap_exp_drops, 0, 0, 0)

        grid_sizer_5.Add((20, 0), 0, 0, 0)

        self.checkbox_monsters_swap_gold_drops = wx.CheckBox(
            self.monsters_tab, wx.ID_ANY, "Swap gold drops"
        )
        self.checkbox_monsters_swap_gold_drops.SetToolTip(
            "If checked, swaps the gold drop of encounters. It is good to keep this checked to ensure all encounters drop gold."
        )
        self.checkbox_monsters_swap_gold_drops.SetValue(1)
        self.state.monsters.swap_gold_drops = (
            self.checkbox_monsters_swap_gold_drops.GetValue() == 1
        )
        grid_sizer_5.Add(self.checkbox_monsters_swap_gold_drops, 0, 0, 0)

        self.skill_sets_tab = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.skill_sets_tab, "Skill sets")

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_4 = wx.FlexGridSizer(1, 1, 0, 0)
        sizer_3.Add(grid_sizer_4, 1, wx.ALL | wx.EXPAND, 10)

        self.checkbox_randomize_skill_sets = wx.CheckBox(
            self.skill_sets_tab, wx.ID_ANY, "Randomize skill sets"
        )
        self.checkbox_randomize_skill_sets.SetToolTip(
            "If checked, randomizes aspects of skill sets."
        )
        self.checkbox_randomize_skill_sets.SetValue(1)
        self.state.skill_sets.randomize = (
            self.checkbox_randomize_skill_sets.GetValue() == 1
        )
        grid_sizer_4.Add(self.checkbox_randomize_skill_sets, 0, 0, 0)

        self.other_tab = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.other_tab, "Other")

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_7 = wx.FlexGridSizer(1, 1, 0, 0)
        sizer_4.Add(grid_sizer_7, 1, wx.ALL | wx.EXPAND, 10)

        self.checkbox_remove_dialogue = wx.CheckBox(
            self.other_tab, wx.ID_ANY, "Remove dialogue"
        )
        self.checkbox_remove_dialogue.SetToolTip(
            "If checked, all non-choice dialogue boxes will be removed. This makes it easier to get through cutscenes quickly."
        )
        self.state.other.remove_dialogue = self.checkbox_remove_dialogue.GetValue() == 1
        grid_sizer_7.Add(self.checkbox_remove_dialogue, 0, 0, 0)

        self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, "Randomize!")
        sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        self.other_tab.SetSizer(sizer_4)

        self.skill_sets_tab.SetSizer(sizer_3)

        self.monsters_tab.SetSizer(sizer_2)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_TEXT, self.changed_original_rom, self.input_original_rom)
        self.Bind(wx.EVT_BUTTON, self.select_original_rom, self.OriginalRomBrowse)
        self.Bind(wx.EVT_TEXT, self.changed_seed, self.input_seed)
        self.Bind(wx.EVT_RADIOBOX, self.changed_region, self.radio_box_region)
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_monsters_randomize,
            self.checkbox_randomize_monsters,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_monsters_include_bosses,
            self.checkbox_monsters_include_bosses,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_ter_im_drop_to_rep_mon,
            self.checkbox_transfer_item_drop_to_replacement_monster,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_monsters_include_starters,
            self.checkbox_monsters_include_starters,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_mon_include_gift_monsters,
            self.checkbox_monsters_include_gift_monsters,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_mon_swap_scout_chance,
            self.checkbox_monsters_swap_scout_chance,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_mon_swap_exp_drops,
            self.checkbox_monsters_swap_exp_drops,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_mon_swap_gold_drops,
            self.checkbox_monsters_swap_gold_drops,
        )
        self.Bind(
            wx.EVT_CHECKBOX,
            self.changed_skill_sets_randomize,
            self.checkbox_randomize_skill_sets,
        )
        self.Bind(
            wx.EVT_CHECKBOX, self.changed_remove_dialogue, self.checkbox_remove_dialogue
        )
        self.Bind(wx.EVT_BUTTON, self.create_output_rom, self.button_1)
        # end wxGlade

    def changed_seed(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.input_seed.GetValue()
        try:
            value = int(raw_value)
            self.state.seed = value
            logging.info(f"Changed seed to: {value}")
        except ValueError:
            logging.warning(f"Invalid seed: {raw_value}")

    def changed_original_rom(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.input_original_rom.GetValue()
        value = pathlib.Path(raw_value)
        self.state.original_rom = value
        logging.info(f"Changed original ROM to: {value}")

    def select_original_rom(self, event):  # wxGlade: Main.<event_handler>
        with wx.FileDialog(
            self,
            "Open original ROM",
            wildcard="NDS ROM files (*.nds)|*.nds",
            style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
        ) as file_dialog:
            if file_dialog.ShowModal() == wx.ID_CANCEL:
                return

            self.input_original_rom.SetValue(file_dialog.GetPath())

    def create_output_rom(self, event):  # wxGlade: Main.<event_handler>
        logging.info('User clicked "Randomize!"')

        with wx.FileDialog(
            self,
            "Create output ROM",
            wildcard="NDS ROM files (*.nds)|*.nds",
            style=wx.FD_SAVE,
        ) as file_dialog:
            if file_dialog.ShowModal() == wx.ID_CANCEL:
                logging.info("User did not choose a file to write the output ROM to.")
                return

            output_rom_filepath = pathlib.Path(file_dialog.GetPath())

        randomize_thread = RandomizeThread(self.state, output_rom_filepath)
        randomize_thread.start()

    def changed_monsters_randomize(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_randomize_monsters.GetValue()
        logging.info(f"User set randomize monsters: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.randomize = raw_value == 1

        if raw_value == 1:
            if self.state.monsters.include_bosses:
                self.checkbox_transfer_item_drop_to_replacement_monster.Enable()
            self.checkbox_monsters_include_bosses.Enable()
            self.checkbox_monsters_include_starters.Enable()
            self.checkbox_monsters_include_gift_monsters.Enable()
            self.checkbox_monsters_swap_scout_chance.Enable()
            self.checkbox_monsters_swap_exp_drops.Enable()
            self.checkbox_monsters_swap_gold_drops.Enable()
        else:
            self.checkbox_monsters_include_bosses.Disable()
            self.checkbox_transfer_item_drop_to_replacement_monster.Disable()
            self.checkbox_monsters_include_starters.Disable()
            self.checkbox_monsters_include_gift_monsters.Disable()
            self.checkbox_monsters_swap_scout_chance.Disable()
            self.checkbox_monsters_swap_exp_drops.Disable()
            self.checkbox_monsters_swap_gold_drops.Disable()

    def changed_monsters_include_starters(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_monsters_include_starters.GetValue()
        logging.info(f"User set monsters include starters: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.include_starters = raw_value == 1

    def changed_monsters_include_bosses(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_monsters_include_bosses.GetValue()
        logging.info(f"User set monsters include bosses: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.include_bosses = raw_value == 1

        if raw_value == 1:
            self.checkbox_transfer_item_drop_to_replacement_monster.Enable()
        else:
            self.checkbox_transfer_item_drop_to_replacement_monster.Disable()

    def changed_ter_im_drop_to_rep_mon(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_transfer_item_drop_to_replacement_monster.GetValue()
        logging.info(f"User set transfer item drop to replacement monster: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.transfer_boss_item_drops = raw_value == 1

    def changed_mon_include_gift_monsters(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_monsters_include_gift_monsters.GetValue()
        logging.info(f"User set monsters include gift monsters: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.include_gift_monsters = raw_value == 1

    def changed_mon_swap_scout_chance(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_monsters_swap_scout_chance.GetValue()
        logging.info(f"User set swap scout chance: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.swap_scout_chance = raw_value == 1

    def changed_mon_swap_exp_drops(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_monsters_swap_exp_drops.GetValue()
        logging.info(f"User set swap exp drops: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.swap_experience_drops = raw_value == 1

    def changed_mon_swap_gold_drops(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_monsters_swap_gold_drops.GetValue()
        logging.info(f"User set swap gold drops: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.monsters.swap_gold_drops = raw_value == 1

    def changed_skill_sets_randomize(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_randomize_skill_sets.GetValue()
        logging.info(f"User set randomize skill sets: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.skill_sets.randomize = raw_value == 1

    def changed_region(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.radio_box_region.GetSelection()
        logging.info(f"User set region: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.region = Region(raw_value)
        logging.info(f"Region is now: {Region(raw_value)}")

    def changed_remove_dialogue(self, event):  # wxGlade: Main.<event_handler>
        raw_value = self.checkbox_remove_dialogue.GetValue()
        logging.info(f"User set remove dialogue: {raw_value}")

        assert isinstance(raw_value, int)
        self.state.other.remove_dialogue = raw_value == 1

    def _on_randomize_start(self) -> None:
        self.last_step_completed = 0
        wx.CallAfter(self._open_progress_dialog)

    def _open_progress_dialog(self) -> None:
        self.progress_dialog = wx.ProgressDialog(
            "Generating randomized ROM",
            "Generation of randomized ROM is currently in progress.",
            parent=self,
        )

        # Resolve race condition where the randomization quickly failing could leave the progress
        # dialog stuck open
        if self.last_step_completed is None:
            self._close_progress_dialog()

    def _on_randomize_num_steps(self, num_steps: int) -> None:
        wx.CallAfter(lambda: self._set_num_steps(num_steps))

    def _set_num_steps(self, num_steps: int) -> None:
        if self.progress_dialog is not None:
            self.progress_dialog.SetRange(num_steps)

    def _on_randomize_progress(self) -> None:
        wx.CallAfter(self._progress)

    def _progress(self) -> None:
        if self.progress_dialog is not None and self.last_step_completed is not None:
            self.last_step_completed += 1
            self.progress_dialog.Update(self.last_step_completed)

    def _on_randomize_successful(self, message: str) -> None:
        self.last_step_completed = None
        wx.CallAfter(self._close_progress_dialog)
        wx.CallAfter(self._open_success_dialog, message=message)

    def _open_success_dialog(self, message: str) -> None:
        wx.MessageBox(
            message,
            "Success",
            wx.OK | wx.ICON_INFORMATION,
            parent=self,
        )

    def _on_randomize_failed(self, message: str) -> None:
        self.last_step_completed = None
        wx.CallAfter(self._close_progress_dialog)
        wx.CallAfter(self._open_failure_dialog, message=message)

    def _close_progress_dialog(self) -> None:
        if self.progress_dialog is not None:
            self.progress_dialog.Update(self.progress_dialog.GetRange())

    def _open_failure_dialog(self, message: str) -> None:
        wx.MessageBox(
            message,
            "Failure",
            wx.OK | wx.ICON_ERROR,
            parent=self,
        )


# end of class Main


class MyApp(wx.App):
    def OnInit(self) -> bool:
        self.frame = Main(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
